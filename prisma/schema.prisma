datasource db {
  provider = "postgres"
  url      = "postgresql://shawn:@localhost:5432/appdb"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model User {
  id            String    @id @default(cuid())
  givenName     String?
  familyName    String?
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  addressId     Int?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  listings      Listing[]
  address       Address?  @relation(fields: [addressId], references: [id])
  profile       Profile?

  Account Account[]
  Session Session[]
  @@map(name: "users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id        Int      @id @default(autoincrement())
  line1     String?
  line2     String?
  line3     String?
  line4     String?
  locality  String?
  postcode  String?
  countryId Int
  regionId  Int
  user      User[]
  region    Region   @relation(fields: [regionId], references: [id])
  country   Country  @relation(fields: [countryId], references: [id])
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")
}

model Country {
  id      Int       @id @default(autoincrement())
  name    String
  code    String    @db.VarChar(2)
  region  Region[]
  Address Address[]
}

model Region {
  id        Int       @id @default(autoincrement())
  name      String
  code      String    @db.VarChar(2)
  countryId Int
  Country   Country   @relation(fields: [countryId], references: [id])
  Address   Address[]
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId String  @unique
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Listing {
  id                Int                  @id @default(autoincrement())
  title             String
  image             String[]
  published         Boolean              @default(false)
  userId            String
  listingId         Int
  createdAt         DateTime             @default(now()) @map(name: "created_at")
  updatedAt         DateTime             @default(now()) @map(name: "updated_at")
  categoryId        Int
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingInfomation ListingInformation[]
  Category          Category[]
}

model ListingInformation {
  id             Int          @id @default(autoincrement())
  price          Decimal      @db.Money
  description    String
  listingId      Int
  manufacturerId Int
  mediumId       Int
  createdAt      DateTime     @default(now()) @map(name: "created_at")
  updatedAt      DateTime     @default(now()) @map(name: "updated")
  listing        Listing      @relation(fields: [listingId], references: [id])
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])
  medium         Medium       @relation(fields: [mediumId], references: [id])
}

model Manufacturer {
  id                 Int                  @id @default(autoincrement())
  name               String
  createdAt          DateTime             @default(now()) @map(name: "created_at")
  updatedAt          DateTime             @default(now()) @map(name: "updated")
  listingInformation ListingInformation[]
}

model Grade {
  id        Int      @id @default(autoincrement())
  grade     String
  graderId  Int
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated")
  Grader    Grader   @relation(fields: [graderId], references: [id])
}

model Grader {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated")
  grade     Grade[]
}

model Medium {
  id                 Int                 @id @default(autoincrement())
  type               String
  createdAt          DateTime            @default(now()) @map(name: "created_at")
  updatedAt          DateTime            @default(now()) @map(name: "updated")
  listingInformation ListingInformation?
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  parentId  Int
  listingId Int
  typeId    Int
  rarityId  Int
  artistId  Int
  setId     Int
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @default(now()) @map(name: "updated")
  children  Category[] @relation("SubCategories")
  parent    Category   @relation("SubCategories", fields: [parentId], references: [id])
  Listing   Listing?   @relation(fields: [listingId], references: [id])
  Type      Type?      @relation(fields: [typeId], references: [id])
  Rarity    Rarity?    @relation(fields: [rarityId], references: [id])
  Artist    Artist?    @relation(fields: [artistId], references: [id])
  Set       Set?       @relation(fields: [setId], references: [id])

  @@unique([name])
}

model Card {
  id              String   @id @default(uuid())
  name            String
  universalId     Int
  imageUrl        String
  text            String?
  layout          String?
  collectorNumber String?
  printing        String[]
  typeId          Int
  rarityId        Int
  createdAt       DateTime @default(now()) @map(name: "created_at")
  updatedAt       DateTime @default(now()) @map(name: "updated")
  universalType   Type     @relation("UniversalType", fields: [typeId], references: [id])
  types           Type[]
  rarity          Rarity   @relation(fields: [rarityId], references: [id])
}

model Type {
  id            Int        @id @default(autoincrement())
  name          String
  categoryId    Int
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @default(now()) @map(name: "updated")
  cardSuperType Card?      @relation("UniversalType")
  category      Category[]
  card          Card[]
}

model Rarity {
  id         Int        @id @default(autoincrement())
  name       String
  categoryId Int
  createdAt  DateTime   @default(now()) @map(name: "created_at")
  updatedAt  DateTime   @default(now()) @map(name: "updated")
  category   Category[]
  Card       Card[]
}

model Artist {
  id         Int        @id @default(autoincrement())
  name       String
  categoryId Int
  createdAt  DateTime   @default(now()) @map(name: "created_at")
  updatedAt  DateTime   @default(now()) @map(name: "updated")
  category   Category[]
}

model Set {
  id         Int        @id @default(autoincrement())
  name       String
  categoryId Int
  createdAt  DateTime   @default(now()) @map(name: "created_at")
  updatedAt  DateTime   @default(now()) @map(name: "updated")
  category   Category[]
}
